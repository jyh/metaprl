(*!
 * @begin[doc]
 * @theory[Base_theory]
 *
 * The @tt[Base_theory] ``theory'' is not a theory in the strict sense.
 * It defines only two rules (in the @hreftheory[Base_rewrite] module;
 * Section @reftheory[Base_rewrite]).  Instead, it serves as the
 * connection to the primitive @MetaPRL prover, and it defines
 * several resources that are useful for defining tactics.
 *
 * The connection with the primitive @MetaPRL prover is defined
 * in the modules @hreftheory[Top_tacticals] (Section @reftheory[Top_tacticals])
 * and @hreftheory[Top_conversionals] (Section @reftheory[Top_conversionals]).
 * The @hreftheory[Top_tacticals] module defines the primitive tactics (such as the
 * identity and failure tactics), and several tacticals for tactic
 * composition (such as the @hreftactic[thenT]{} and @hreftactic[orelseT]
 * tacticals).  The @hreftheory[Top_conversionals] module defines @emph{conversions},
 * which play the role of tactics for @emph{rewriting}.
 *
 * The base theory also defines several resources that can be used to
 * build automated tactics.  The @hreftheory[Mptop] module (Section @reftheory[Mptop])
 * defines a resource for adding functions to the @MetaPRL interactive
 * top-loop.  The @hreftheory[Base_auto_tactic] module
 * (Section @reftheory[Base_auto_tactic]) defines a resource for
 * defining the @hreftactic[trivialT] and @hreftactic[autoT]
 * tactics for automated reasoning.  The @hreftheory[Base_dtactic] module
 * (Section @reftheory[Base_dtactic]) defines resources for adding
 * introduction and elimination reasoning to the @hreftactic[dT] tactic.
 *
 * The @tt[Base_theory] module itself defines no new primitives; it
 * simply bring together all the parts of the base logic into a unified
 * module.  Descendent theories (such as the @Nuprl type theory, Section
 * @reftheory[Itt_theory], and the first-order logic Section @reftheory[Fol_theory])
 * include the @hreftheory[Base_theory] directly.
 * @end[doc]
 *
 * ----------------------------------------------------------------
 *
 * @begin[license]
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey
 * @email{jyh@cs.caltech.edu}
 *
 * @end[license]
 *)

(*!
 * @begin[doc]
 * @parents
 * @end[doc]
 *)
extends Summary
extends Mptop
extends Var
extends Top_tacticals
extends Top_conversionals
extends Base_trivial
extends Base_auto_tactic
extends Base_dtactic
extends Base_rewrite
(*! @docoff *)

(*
 * This are very basic theories; not included in
 * the documentation.
 *)
extends Perv
extends Nuprl_font
extends Base_dform
extends Comment
extends Ocaml_df
extends Base_trivial
extends Typeinf
extends Base_cache
extends Base_meta

(*
 * -*-
 * Local Variables:
 * Caml-master: "prlcomp.run"
 * End:
 * -*-
 *)
