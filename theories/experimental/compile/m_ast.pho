(*
 * The M Abstract Syntax.
 *
 * ----------------------------------------------------------------
 * Copyright (C) 2003 Adam Granicz, Caltech
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Adam Granicz
 * Email: granicz@cs.caltech.edu
 *)

Module M_ast

// Define the term-set to be used.

Terms -extend "M_ast" {
   // Define our own list terms
   declare mcons{'el; 'list}
   declare mnil

   // Binary operators
   declare AddOp
   declare SubOp
   declare MulOp
   declare DivOp

   declare LeOp
   declare LtOp
   declare GeOp
   declare GtOp
   declare EqOp
   declare NeqOp

   // Atoms
   declare AtomInt[n]
   declare AtomFun{'e}
   declare AtomBinop{'op; 'a1; 'a2}

   // Expressions
   declare LetAtom{'a; 'e}
   declare TailCall{'f; 'a}
   declare If{'a; 'e1; 'e2}
   declare LetPair{'a1; 'a2; 'e}
   declare LetSubscript{'a1; 'a2; 'e}
   declare SetSubscript{'a1; 'a2; 'a3; 'e}
   declare LetFun{'e1; 'e2}
   declare LetRecFun{'e1; 'e2}
   declare LetApply{'f; 'a; 'e}
   declare Return{'a}

}

Terms -extend "$" {
   declare bind_vars{'vars; 'e}
}

// Place global code here.
// This section can be omitted.
{}

// Designate terminals.
// Options: -longest : match longest substring.
//          -first   : match first substring that matches.

Tokens -longest {
   ID = "[_a-zA-Z][_a-zA-Z0-9]*"    { __token__[p:s]{'pos} -> 'p }
   NUM = "[0-9]+"                   { __token__[p:s]{'pos} -> AtomInt[p:n] }

   ELSE = "else"                    {}
   END = "end"                      {}
   FUN = "fun"                      {}
   IF = "if"                        {}
   IN = "in"                        {}
   LET = "let"                      {}
   REC = "rec"                      {}
   THEN = "then"                    {}

   ARROW = "->"                     {}
   ASSIGN = "<-"                    {}
   COMMA = ","                      {}
   DIV = "/"                        {}
   DOT = "\\."                      {}
   EQ = "="                         {}
   GE = ">="                        {}
   GT = ">"                         {}
   LBRACK = "\\["                   {}
   LE = "<="                        {}
   LPAREN = "("                     {}
   LT = "<"                         {}
   MINUS = "-"                      {}
   NEQ = "<>"                       {}
   REM = "%"                        {}
   PLUS = "+"                       {}
   RBRACK = "\\]"                   {}
   RPAREN = ")"                     {}
   SEMI = ";"                       {}
   TIMES = "*"                      {}

   * COMMENT = "//[^\\n]*"          {}
   * EOL = "\\n"                    {}
   * SPACE = " "                    {}
}

// Specify associativity rules.
// Tokens appearing first have lower, 
// and tokens appearing on the same
// line have the same precendence.
// This section is optional.

%left prec_atom
%left ELSE
%left LT LE GT GE EQ NEQ
%left PLUS MINUS
%left TIMES DIV REM
%left LBRACK
%right prec_apply

// Specify grammar.
// Must supply a start symbol.

Grammar -start exp {
   exp ::= LET ID<var[v:v]> EQ a<'a> IN exp<'e>
                                    => LetAtom{'a; v. 'e}
    | LET ID<var[f:v]> LPAREN id_list<'params> RPAREN EQ exp<'e1> IN exp<'e2>
                                    => LetAtom{AtomFun{bind_vars{'params; 'e1}}; f.'e2}
    | LET REC ID<var[f:v]> LPAREN id_list<'params> RPAREN EQ exp<'e1> IN exp<'e2>
                                    => LetAtom{f. AtomFun{bind_vars{'params; 'e1}}; f. 'e2}
    | LET ID<var[v:v]> EQ a<'a1> LBRACK a<'a2> RBRACK IN exp<'e>
                                    => LetSubscript{'a1; 'a2; v. 'e}
    | LET ID<var[v:v]> EQ ID<var[f:v]> LPAREN a_list<'args> RPAREN IN exp<'e>
                                    => LetApply{'f; 'args; v. 'e}
    | LET ID<var[v:v]> EQ LPAREN a<'a1> COMMA a<'a2> RPAREN IN exp<'e>
                                    => LetPair{'a1; 'a2; v. 'e}
    | ID<var[f:v]> LPAREN a_list<'args> RPAREN %prec prec_apply
                                    => TailCall{'f; 'args}
    | IF a<'a> THEN exp<'e1> ELSE exp<'e2>
                                    => If{'a; 'e1; 'e2}
    | a<'a1> LBRACK a<'a2> RBRACK ASSIGN a<'a3> SEMI exp<'e>
                                    => SetSubscript{'a1; 'a2; 'a3; 'e}
    | a<'a> %prec prec_atom         => Return{'a}


   a ::= NUM<'i>                    => 'i
      | ID                          {}
      | FUN ID<var[v:v]> ARROW exp<'e>
                                    => AtomFun{v. 'e}
      | a<'a1> PLUS a<'a2>          => AtomBinop{AddOp{}; 'a1; 'a2}
      | a<'a1> MINUS a<'a2>         => AtomBinop{SubOp{}; 'a1; 'a2}
      | a<'a1> TIMES a<'a2>         => AtomBinop{MulOp{}; 'a1; 'a2}
      | a<'a1> DIV a<'a2>           => AtomBinop{DivOp{}; 'a1; 'a2}

      | a<'a1> LE a<'a2>            => AtomBinop{LeOp{}; 'a1; 'a2}
      | a<'a1> LT a<'a2>            => AtomBinop{LtOp{}; 'a1; 'a2}
      | a<'a1> GE a<'a2>            => AtomBinop{GeOp{}; 'a1; 'a2}
      | a<'a1> GT a<'a2>            => AtomBinop{GtOp{}; 'a1; 'a2}
      | a<'a1> EQ a<'a2>            => AtomBinop{EqOp{}; 'a1; 'a2}
      | a<'a1> NEQ a<'a2>           => AtomBinop{NeqOp{}; 'a1; 'a2}

   // Not the most efficient way to parse lists...
   a_list ::= a<'a>                 => mcons{'a; mnil{}}
      | a<'a> COMMA a_list<'list>   => mcons{'a; 'list}

   id_list ::= ID<var[v:v]>         => mcons{'v; mnil{}}
      | ID<var[v:v]> COMMA id_list<'list>
                                    => mcons{'v; 'list}
}

// Perform binding.
Rewrites {
}
