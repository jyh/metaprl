(*
 * Types used uduring register allocation.
 *
 * ----------------------------------------------------------------
 *
 * @begin[license]
 * Copyright (C) 2003 Jason Hickey, Caltech
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey
 * @email{jyh@cs.caltech.edu}
 * @end[license]
 *)
extends Base_theory

open Format

open Lm_symbol
open Lm_symbol_matrix
open Lm_trace

open Refiner.Refiner.TermType

(*
 * Variables are just symbols.
 *)
type var = symbol
type label = symbol
type reg = symbol
type reg_class = int

(*
 * The ``code'' type is an abstract characterization of an instruction.
 * For register allocation all we care about is the defs/uses in the
 * instruction, and whether the instruction is normal, or a move, or a
 * jump.
 *
 * The code_class indicates the type of instruction:
 *    CodeNormal:       A typical (computational) instruction.
 *    CodeMove:         An instruction that moves a value from one
 *                      location to another. There should be exactly one
 *                      def and one use.
 *    CodeJump label:   An instruction which *may* jump to the label
 *                      indicated.  This includes conditional jumps.
 *
 * The code structure is parameterized on 'inst, the type of instructions:
 *    code_src:         Sources (uses) for the instruction
 *    code_dst:         Destinations (defs) for the instruction
 *    code_class:       Classification for the instruction (see above)
 *    code_inst:        The original instruction
 *)
type code_class =
   CodeNormal
 | CodeMove
 | CodeJump of label

and 'inst code =
   { code_src   : SymbolSet.t;
     code_dst   : SymbolSet.t;
     code_class : code_class;
     code_inst  : 'inst;
     code_rest  : 'inst code list
   }

(*
 * At other times, we need to know what the live variables are.
 * This structure is parameterized on 'inst, the type of the
 * instructions.
 *    live_src:         Sources (uses) for the instruction
 *    live_dst:         Destinations (defs) for the instruction
 *    live_out:         The set of variables live after this inst.
 *    live_class:       Classification for the instruction (see above)
 *    live_depth:       Lm_loop nesting depth for the instruction
 *    live_inst:        Original instruction
 *)
type 'inst live =
   { live_src   : SymbolSet.t;
     live_dst   : SymbolSet.t;
     live_out   : SymbolSet.t;
     live_class : code_class;
     live_depth : int;
     live_inst  : 'inst;
     live_rest  : 'inst live list
   }

(*
 * The ignore list is a set of registers to ignore.
 *)
type ignore = reg list

(*
 * A var table gives a register class to every variable in
 * the program.
 *)
type var_table = reg_class SymbolTable.t

(*
 * The frame defines the calling convention for the backend.
 *)
module type FrameSig =
sig
   (*
    * Types:
    *    'a block:   An assembly block (parameterized arbitrarily)
    *    inst:       Type of an instruction for this architecture.
    *)
   type 'a block
   type inst

   (*
    * Cost for load/store operations.
    *    def_cost:      Cost of def in a normal instruction
    *    use_cost:      Cost of use in a normal instruction
    *    mov_def_cost:  Cost of def when used in a move instruction
    *    mov_use_cost:  Cost of use when used in a move instruction
    *
    *    min_spill_length: Don't spill the node if the length of the
    *       live range is smaller than this
    *)
   val def_cost : int
   val use_cost : int
   val mov_def_cost : int
   val mov_use_cost : int

   val min_spill_length : int

   (*
    * block_label block -- returns the label for a block.
    *
    * block_code ignore block -- converts an instruction block into a
    *    list of code instructions, suitable for liveness analysis.
    *
    * block_live block live -- converts a block of instructions into a
    *    block of instructions with liveness information included.
    *
    * print_blocks out blocks -- prints out all blocks in the trace.
    *
    * print_live_blocks out blocks -- prints out all blocks (with
    *    liveness information) in the trace.
    *)
   val block_label : 'a block -> label
   val block_code : ignore -> inst block -> inst code
   val block_live : inst block -> inst live -> inst live block
   val pp_print_inst_blocks : formatter -> inst block trace -> unit
   val pp_print_code_blocks : formatter -> inst code block trace -> unit
   val pp_print_live_blocks : formatter -> inst live block trace -> unit

   (*
    * reg_class_count -- return the total number of register classes.
    *    An example set of register classes is {integer, float}.
    *
    * registers -- list of registers for each register class (the array
    *    is indexed by each register class).  These are registers that
    *    are available for register allocation.
    *
    * registers_special -- list of special registers for each register
    *    class.  These are not available for register allocation.  An
    *    example of a special register is the flags register for ints.
    *)
   val reg_class_count : int
   val registers : var list array
   val registers_special : var list array

   (*
    * Get all the vars defined in any instruction.
    *)
   val vars_blocks : inst block trace -> var_table

   (*
    * Convert the code in a term.
    *)
   val blocks_of_term : term -> inst block trace
end

(*
 * Stats for a variable.  The defs/uses are arrays of
 * how many times the variable occurs at a given depth.
 *
 * The stats_length is the length of the smallest live
 * range (we don't want to spill variables with
 * very short live ranges).
 *)
type stats =
   { mutable stats_length : int;
     mutable stats_defs : int array;
     mutable stats_uses : int array
   }

(*
 * Move information.
 * Keep track of interference with dst var.
 *)
type move_stats =
   { move_depth   : int array }

(*
 * The result of liveness is a list of neighbors for each
 * var, and a set of moves.
 *)
type igraph =
   { igraph_stats : stats SymbolTable.t;
     igraph_graph : bool SymSymbolMatrix.t;
     igraph_moves : move_stats AsymSymbolMatrix.t
   }

(*
 * Liveness analysis.
 *)
module type LiveSig =
sig
   type 'a block
   type inst
   type benv

   (* Create the liveness graph *)
   val create_graph : reg_class SymbolTable.t -> ignore -> inst block trace -> igraph
   val create_live  : reg_class SymbolTable.t -> ignore -> inst block trace -> inst live block trace

   (* Functions for a 2-phase liveness analysis *)
   val create_live_benv  : ignore -> inst block trace -> benv
   val create_live_block : benv -> int -> label -> inst live block
end

(*
 * The register allocator produces a result in one of two types:
 *    RegAllocSpill: spill all these vars
 *    RegAllocColor: here is the register assignment
 *)
type spset =
   RegAllocSpill of SymbolSet.t
 | RegAllocColor of var SymbolTable.t

module type RegAllocSig =
sig
   type block

   val compile : block trace -> spset
end

(* 
 * -*-
 * Local Variables:
 * Caml-master: "compile"
 * End:
 * -*-
 *)
