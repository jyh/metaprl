Mojave FIR Theory
BUGS
by Brian Emre Aydemir (emre@cs.caltech.edu)


Below, I have listed many bugs in the Mojave FIR theory that I am
aware of.  They are listed in no particular order.  I have also listed,
at the end, things that might be considered bugs, but really aren't.
Other bugs can be found by searching the sources for the string ``BUG''.
I make no guarentees that all BUGs are documented in this file, though
I do claim that every bug or problem that I'm aware of is documented.


-- Allocation operators are out of sync with the actual MCC FIR.

-- No terms are declared for tailops and specialCall.  These should
   go in Mfir_exp.

-- In Mfir_sequent, need to say a bit more about the sequents,
   store values, kinds, etc.

-- Need to update alloc ops, pattern matching ruels, alloc
   and subscripting rules...  LetExt needs to encode the
   external definitions or something... using rewrites of course...


Bugs that will probably be unresolved for a long time:

-- Cannot give a type for functions of zero arguments (see Mfir_ty!tyFun).
   In particular, Mfir_connect_ty will convert TyFun ([], t) to some
   term representing t instead of a tyFun term.

-- No terms are declared for subops.  If I implement these,
   perhaps they should go in their own file, e.g. Mfir_subop.

-- No terms are declared for the FIR object system, including tyCase,
   and tyObject.  These should go in Mfir_ty.  The expression
   typeCase should go in Mfir_exp.

-- No terms are declared for the following unary operators:
      pointerOfBlockOp     lengthOfBlockOp
   These should go in Mfir_exp.  (They depend on subops.)

-- No term is declared for the binary operator plusPointerOp.
   It should go in Mfir_exp.  (It depends on subops.)

-- For atomLabel and atomSizeof, I am assuming that the ``num''
   subterms are supposed to be 32-bit, signed integers.

-- Other expressions that are missing include Memcpy, Call, and Assert.
   Related to Assert is the fact that no terms are declared for preds.
   These should all go in Mfir_exp.

-- Connection code bugs:
      .  In many places, I assume the OCaml int type is
         31-bit, signed integers.
      .  I assume integer sets and raw integer sets have closed bounds.


Things that might look like bugs, but really aren't
(see the README for further information):

-- The term tyDelayed is not declared.

-- The term atomFloat encodes the value as a string.

-- The term atomFun is not declared.

-- No terms for debugging info in the FIR are declared.  This includes
   the Debug expression.
