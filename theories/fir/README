Mojave FIR Theory
README
by Brian Emre Aydemir (emre@cs.caltech.edu)

I have made every attempt to document the Mojave FIR theory.  A great
majority of the documentation can be found in the theories.pdf file
generated by running ``make latex''.  Any remaining documentation
is likely to be in the form of comments in .ml files.

---------------------------------------------------------------------------

The following remarks by Brian Emre Aydemir (emre) are intended to
serve as notes to himself.  They may not make sense to others.

-- Mfir_exp display forms may be a bit wacky since I haven't tested them.

-- Possible method for type checking FIR programs:
      1) Build up a context that has all the declarations we'll need.
      2) Type check the context.
      3) Type check each definition given the context.

-- I want to say that has_type[str]{'t; 'ty} also includes a well-formedness
   proof of 'ty.  Of course, I have no way of forcing that to be true in
   MetaPRL.  Does this mean I should go ahead and use ``informal'' reasoning
   elsewhere to simplify rules?  If I had induction over rules, this
   wouldn't be a problem.  *shrug*  I guess I'll explicity do the wf check
   for now, and come back later to see if I can simplify things.

-- The above remark should apply equally well to checking kinds when
   introducing new kind definitions.  Though, I've already gone the lazy
   route with this one...

-- For things like set membership: rewrites or rules? which is faster?

Notable differences from the actual Mojave FIR:

-- The following have been ``curried'' (since: lists are somewhat annoying
   to deal with in MetaPRL, can get better binding variables, ...):
      TyFun

Comments that will be around a while:

-- Must _not_ include anything from ITT.  Otherwise, we get
   a soup of logical inconsistencies/differences.

-- Dropping anything that is related to the object system.
   It is unsound.  Also dropping anything not covered in the
   technical report.

-- MetaPRL theories are open, so we can not do induction over a set of
   rules.  In particular, there's no way we can formalize the proofs
   of the technical report without going through some trouble.
