Mojave FIR Theory
README
by Brian Emre Aydemir (emre@cs.caltech.edu)

I have made every attempt to document the Mojave FIR theory.  A great
majority of the documentation can be found in the theories.pdf file
generated by running ``make latex''.  Any remaining documentation
is likely to be in the form of comments in .ml files.

---------------------------------------------------------------------------


The following remarks by Brian Emre Aydemir (emre) are intended to
serve as notes to himself.  They may not make sense to others.

-- Sequent idea notes:
   1. A sequent to reason about programs (which are sequents):
         gamma_1 |- sequent { gamma_2; v : t = h |- dot } wf
   2. gamma_2 above has the following syntax:
         gamma ::=   empty
                |    gamma, v : Type
                |    gamma, v : Variable
                |    ...
                |    gamma, v : t      (implicit dummy label here)
                |    gamma, v : t = h  (implicit dummy label here)
                |    ...
   3. gamma_1 above may contain things like (f: A -> B), i.e. the
      program (sequent) is quantified over f.

-- I have to check this, but I'm pretty sure these rules rely on the
   program being ``standardized''.

-- IMPORTANT: The term-set is no longer up-to-date!  I need to re-sync
   everything at some point.

-- I should make sure automation, especially those rules added ``by hand'',
   is actually being done ``intelligently''.


Notable differences from the actual Mojave FIR:

-- The following have been ``curried'' (since: lists are somewhat annoying
   to deal with in MetaPRL, can get better binding variables, ...):
      TyFun

-- So the actual FIR specification (mcc/fir/type/fir.ml) has terms
   whose subterms are lists.  In some cases, if these lists are
   empty, the term is degenerate in some sense, e.g TyExists ([], t).
   For my own sanity, I'm not going to consider such degenerate terms,
   and instead, I will assume everything is a normalized form.

-- No term is declared for TyDelayed.  This is intentional, since we
   we do not plan on formalizing type inference in the near future.

-- No term is declared for AtomFun.  I am pretty sure that
   it is not needed.

-- No terms are declared for debugging info in the FIR.
   This info has no semantic content.


Comments that will be around a while:

-- Display forms will be implmented with the philosophy, ``if it works for
   me, it must be good enough''.

-- Must _not_ include anything from ITT.  Otherwise, we get
   a soup of logical inconsistencies/differences.

-- MetaPRL theories are open, so we can not do induction over a set of
   rules.  In particular, there's no way we can formalize the proofs
   of the technical report without going through some trouble.
