#
# Import environment
#
Import qw( env );

#
# Set up basic include path.
#
$env = $env->clone(
   INCPATH  => [@{$env->{INCPATH}},
                "#theories/tactic",
                "#theories/ocaml",
                "#theories/base",
                "#theories/itt"]
);

#
# Set up file lists.
#
my @src_no_mc =
   qw( term_op fir_base fir_ty fir_exp fir_eval deadcode );
my @src_mc =
   qw( term_op fir_base fir_ty fir_exp fir_eval deadcode connect_base connect_ty connect_exp compile );

# TEMP: Will be included once the MC branches merge back...
#       connect_base connect_ty connect_exp compile );

#
# Determine the source file list and library files based on whether
# or now we have the MC compiler source tree.
#
if(defined($ENV{'MC_ROOT'})) {
   $env = $env->clone(
      INCPATH => [@{$env->{INCPATH}},
                  "$env->{MC}/lib/util",
                  "$env->{MC}/fir/type",
                  "$env->{MC}/fir/util"]
   );
   OCamlSources $env (map "mp_mc_$_.ml", @src_mc), 'mp_mc_theory.mlz';
   OCamlLibrary $env 'base', (map "mp_mc_$_", @src_mc), 'mp_mc_theory';
   Export qw( env );
   Default qw( base.cmxa );
   Build qw( tests/Conscript );
} else {
   OCamlSources $env (map "mp_mc_$_.ml", @src_no_mc), 'mp_mc_theory.mlz';
   OCamlLibrary $env 'base', (map "mp_mc_$_", @src_no_mc), 'mp_mc_theory';
   Default qw( base.cmxa );
}
