Import qw( env );

#
# Set up basic include path.
#
$env = $env->clone(
   INCPATH  => [@{$env->{INCPATH}},
                "../tactic",
                "../ocaml",
                "../base",
                "../itt"]
);

#
# Determine the source file list and library files based on whether
# or now we have the MC compiler source tree.
# This is a _really_ ugly hack.  Simplifications welcome!
#
if(defined($ENV{'MC_ROOT'})) {
   $env = $env->clone(
      INCPATH => [@{$env->{INCPATH}},
                  "$env->{MC}/lib/util",
                  "$env->{MC}/fir/type",
                  "$env->{MC}/fir/util"]
   );
   OCamlSources $env
      'mc_term_op.ml',
      'fir_int_set.ml',
      'fir_rawint_set.ml',
      'fir_ty.ml',
      'fir_exp.ml',
      'fir_eval.ml',
      'fir_deadcode.ml',
      'fir_const_elim.ml',
      'mc_fir_connect_base.ml',
      'mc_fir_connect_ty.ml',
      'mc_fir_connect_exp.ml',
      'mc_fir_connect.ml',
      'mc_theory.ml',
      'fir_test.ml';
   OCamlLibrary $env 'base',
      'mc_term_op',
      'fir_int_set',
      'fir_rawint_set',
      'fir_ty',
      'fir_exp',
      'fir_eval',
      'fir_deadcode',
      'fir_const_elim',
      'mc_fir_connect_base',
      'mc_fir_connect_ty',
      'mc_fir_connect_exp',
      'mc_fir_connect',
      'mc_theory',
      'fir_test';
} else {
   OCamlSources $env
      'mc_term_op.ml',
      'fir_int_set.ml',
      'fir_rawint_set.ml',
      'fir_ty.ml',
      'fir_exp.ml',
      'fir_eval.ml',
      'fir_deadcode.ml',
      'fir_const_elim.ml',
      'mc_theory.ml',
      'fir_test.ml';
   OCamlLibrary $env 'base',
      'mc_term_op',
      'fir_int_set',
      'fir_rawint_set',
      'fir_ty',
      'fir_exp',
      'fir_eval',
      'fir_deadcode',
      'fir_const_elim',
      'mc_theory',
      'fir_test';
}

#
# Add the theory to the default build list.
#
Default qw( base.cmxa );
