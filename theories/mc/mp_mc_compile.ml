(*
 * Functional Intermediate Representation formalized in MetaPRL.
 *
 * Provides the primary interface to the MCC compiler.
 *
 * ----------------------------------------------------------------
 *
 * Copyright (C) 2002 Brian Emre Aydemir, Caltech
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Brian Emre Aydemir
 * Email:  emre@its.caltech.edu
 *)

include Base_theory
include Mp_mc_theory (* Only needed to establish proper dependencies. *)

open Symbol
open Fir

open Simple_print.SimplePrint
open Top_conversionals

open Mp_mc_fir_phobos
open Mp_mc_const_elim
open Mp_mc_deadcode
open Mp_mc_connect_prog

(*
 * This is the outermost rewriter we want to use to rewrite the program.
 *)

let apply_rewrite_top = apply_rewrite (Mp_resource.theory_bookmark "Mp_mc_theory")

(*
 * Takes a FIR term generated by Phobos and for now, applies some rewrites
 * to it, and then just quits.  Eventually, the processed term will
 * be given back to MCC as an Fir.prog struct for further compilation.
 *)

(*
 * NOTE: post_rewrites is (mp_term * mp_term) list, where
 *       type mp_term = term * pos
 *)
let compile_phobos_fir term post_rewrites =
   print_simple_term term;
   print_string "\n\nHardcoded debug print statement hit...\n\n";
   (* Simplify term first *)
   let term = apply_rewrite_top reduceC term in
(*   let term = apply_rewrite_top preFirToFirC term in
   let term = apply_rewrite_top firDeadcodeC term in*)
(* BROKEN
   let term = apply_rewrite firConstElimC term in
 *)

   (*
    * Create the rewrites to add to the reduce resource.
    * You don't have to do this, you could just use the
    * conversions returned by create_iform directly.
    * However, reduce is highly optimized.
    *)
   let patterns =
      List.map (fun ((redex, _), (contractum, _)) ->
            Format.print_string "post-rewrite : ";
            print_simple_term redex;
            Format.print_string "  ->  ";
            print_simple_term contractum;
            Format.print_string "\n";
            let conv = create_iform "post_proc" redex contractum in
               redex, conv) post_rewrites
   in

   (*
    * Add them to the reduce resource.
    * Note the the improve_list function expects an Obj.t.
    * this is not good, we should define a wrapper function
    * to hide the use of magic.
    *)
   let _ =
      Mp_resource.improve_list "reduce" (Obj.magic patterns)
   in
(*   let apply_rewrite_post = apply_rewrite (Mp_resource.theory_bookmark "Mp_mc_compile") in*)
   (* reduceC should now contain the iforms we need. *)
   let term = apply_rewrite_top reduceC term in
   (* Apply optimizations *)
   let term = apply_rewrite_top firDeadcodeC term in
      print_simple_term term;
      print_string "\n\nWahoo! Made it...\n\n"

(*
 * Takes a MCC Fir.prog structure and applies some rewrites to it,
 * and then returns a new Fir.prog struct to MCC for further compilation.
 *)

let compile_mc_fir prog =
   let table = SymbolTable.map term_of_fundef prog.prog_funs in
   let table = SymbolTable.map (apply_rewrite_top firDeadcodeC) table in
(* BROKEN
   let table = SymbolTable.map (apply_rewrite firConstElimC) table in
*)
   let new_prog_funs = SymbolTable.map fundef_of_term table in
      { prog with prog_funs = new_prog_funs }
