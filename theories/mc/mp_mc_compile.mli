(*
 * Functional Intermediate Representation formalized in MetaPRL.
 *
 * Provides the primary interface to the MCC compiler.
 *
 * ----------------------------------------------------------------
 *
 * Copyright (C) 2002 Brian Emre Aydemir, Caltech
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Brian Emre Aydemir
 * Email:  emre@its.caltech.edu
 *)

open Phobos_type
open Refiner.Refiner.Term

(***
 * WARNING: Any time this file is changed, the corresponding MCC
 * stub-file in mcc/meta-prl must be updated as well.
 ***)

(* Set this to true to enable debugging code / output.
 * Defaults to false. *)

val debug : bool ref

(*
 * Takes a FIR term generated by Phobos and for now, applies some rewrites
 * to it, and then just quits.  Eventually, the processed term will
 * be given back to MCC as an Fir.prog struct for further compilation.
 *)

val compile_phobos_fir : term -> mp_pre_term_rewrite list -> unit

(*
 * Takes a MCC Fir.prog structure and applies some rewrites to it,
 * and then returns a new Fir.prog struct to MCC for further compilation.
 *)

val compile_mc_fir : Fir.prog -> Fir.prog
