(*
 * Operational semantics of the imperative programs.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/htmlman/default.html or visit http://metaprl.org/
 * for more information.
 *
 * Copyright (C) 1999 Jason Hickey, Cornell University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

extends Sil_syntax
extends Sil_state

open Refiner.Refiner
open Refiner.Refiner.TermType
open Refiner.Refiner.TermOp
open Refiner.Refiner.TermMan
open Refiner.Refiner.RefineError

open Tactic_type
open Tactic_type.Conversionals
open Tactic_type.Tacticals

open Auto_tactic
open Base_rewrite

open Itt_equal

(************************************************************************
 * EVALSTO DEFINITION                                                   *
 ************************************************************************)

declare evalsto{'e1; 'e2}
declare eval{'e; 's}
declare prog{s. 'e['s]}
declare "value"{'v; 's}
declare "match"{'t1; x, y. 't2['x; 'y]}

prim_rw unfold_evalsto : evalsto{'e1; 'e2} <--> Perv!"rewrite"{'e1; 'e2}
prim_rw unfold_eval : eval{'e; 's} <--> Itt_rfun!apply{'e; 's}
prim_rw unfold_prog : prog{s. 'e['s]} <--> Itt_rfun!lambda{s. 'e['s]}
prim_rw unfold_value : "value"{'v; 's} <--> Itt_dprod!pair{'v; 's}
prim_rw unfold_match : "match"{'t1; x, y. 't2['x; 'y]} <--> spread{'t1; x, y. 't2['x; 'y]}

let fold_evalsto = makeFoldC << evalsto{'e1; 'e2} >> unfold_evalsto
let fold_eval = makeFoldC << eval{'e; 's} >> unfold_eval
let fold_prog = makeFoldC << prog{s. 'e['s]} >> unfold_prog
let fold_value = makeFoldC << "value"{'v; 's} >> unfold_value
let fold_match = makeFoldC << "match"{'t1; x, y. 't2['x; 'y]} >> unfold_match

prec prec_evalsto
prec prec_match
prec prec_match < prec_evalsto

dform evalsto_df : parens :: "prec"[prec_evalsto] :: evalsto{'e1; 'e2} =
   slot{'e1} " " Mpsymbols!downarrow " " slot{'e2}

dform eval_df : eval{'e; 's} =
   `"eval(" slot{'e} `"," slot{'s} `")"

dform prog_df : prog{s. 'e} =
   `"prog(" pushm[0] slot{'s} `"." hspace slot{'e} `")" popm

dform value_df : "value"{'v; 's} =
   `"value(" slot{'v} `"," slot{'s} `")"

dform match_df : parens :: "prec"[prec_match] :: "match"{'t1; x, y. 't2} =
   szone pushm[3] keyword["match "] slot{'t1} keyword[" with"] hspace
   "value"{'x; 'y} `" ->" hspace slot{'t2} popm ezone

interactive_rw reduce_eval : eval{prog{s1. 'e1['s1]}; 's2} <--> 'e1['s2]

interactive_rw reduce_match : "match"{."value"{'v; 's}; x, y. 't['x; 'y]} <--> 't['v; 's]

interactive evalsto_intro :
   sequent { <H> >- evalsto{'e1; 'e1} }

let reduce_info =
   [<< "match"{."value"{'v; 's}; x, y. 't['x; 'y]} >>, reduce_match;
    << eval{prog{s1. 'e['s1]}; 's2} >>, reduce_eval]

let reduce_resource = Top_conversionals.add_reduce_info reduce_resource reduce_info

let d_evalsto_introT p =
   evalsto_intro (Sequent.hyp_count_addr p) p

let trivial_resource =
   Mp_resource.improve trivial_resource (**)
      { auto_name = "triv_equalT";
        auto_prec = trivial_prec;
        auto_tac = d_evalsto_introT
      }

let rwevalT i p =
   let mseq = Sequent.msequent p in
   let _, hyps = Refine.dest_msequent mseq in
   let len = List.length hyps in
   let _ =
      if i <= 0 || i > len then
         raise (RefineError ("rwevalT", StringIntError ("hyp is out of range", i)))
   in
   let hyp = List.nth hyps (pred i) in
   let goal = TermMan.nth_concl hyp 1 in
   let a, b = two_subterms goal in
   let t = mk_xrewrite_term a b in
      (rewriteT t
       thenLT [squash_rewriteT thenT rw fold_evalsto 0 thenT nthAssumT i; idT]) p

(************************************************************************
 * DEFINITIONS                                                          *
 ************************************************************************)

(*
 * Numbers.
 *)
prim_rw unfold_snumber : Sil_syntax!number[i:n] <--> prog{s. "value"{.Itt_int!number[i:n]; 's}}

prim_rw unfold_add : Sil_syntax!add{'e1; 'e2} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
      "match"{.eval{'e2; 's2}; v2, s3.
         "value"{.Itt_int!add{'v1; 'v2}; 's3}}}}

prim_rw unfold_sub : Sil_syntax!sub{'e1; 'e2} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
      "match"{.eval{'e2; 's2}; v2, s3.
         "value"{.Itt_int!sub{'v1; 'v2}; 's3}}}}

prim_rw unfold_if : "if"{'e1; 'e2; 'e3; 'e4} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
      "match"{.eval{'e2; 's2}; v2, s3.
         ifthenelse{eq_int{'v1; 'v2}; .eval{'e3; 's3}; .eval{'e4; 's3}}}}}

(*
 * Disjoint union.
 *)
prim_rw unfold_inl : Sil_syntax!inl{'e1} <--> prog{s1. "match"{.eval{'e1; 's1}; v1, s2. "value"{.Itt_union!inl{'v1}; 's2}}}
prim_rw unfold_inr : Sil_syntax!inr{'e1} <--> prog{s1. "match"{.eval{'e1; 's1}; v1, s2. "value"{.Itt_union!inr{'v1}; 's2}}}

prim_rw unfold_decide : Sil_syntax!decide{'e1; x. 'e2['x]; y. 'e3['y]} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
         Itt_union!decide{'v1; x. eval{'e2['x]; 's2}; y. eval{'e3['y]; 's2}}}}

(*
 * Pairs.
 *)
prim_rw unfold_pair : Sil_syntax!pair{'e1; 'e2} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
      "match"{.eval{'e2; 's2}; v2, s3.
         "value"{.Itt_dprod!pair{'v1; 'v2}; 's3}}}}

prim_rw unfold_spread : Sil_syntax!spread{'e1; x, y. 'e2['x; 'y]} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
         Itt_dprod!spread{'v1; x, y.
            eval{'e2['x; 'y]; 's2}}}}

(*
 * Reference cells.
 *)
prim_rw unfold_ref : ref{'e1} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
         alloc{'s2; 'v1}}}

prim_rw unfold_deref : deref{'e1} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
         "value"{fetch{'s2; 'v1}; 's2}}}

prim_rw unfold_assign : assign{'e1; 'e2} <-->
   prog{s1.
      "match"{.eval{'e1; 's1}; v1, s2.
      "match"{.eval{'e2; 's2}; v2, s3.
         "value"{.Itt_int!number[0:n]; store{'s3; 'v1; 'v2}}}}}

(*
 * Functions.
 *)
prim_rw unfold_lambda : Sil_syntax!lambda{v. 'e1['v]} <-->
   prog{s1. "value"{.Itt_rfun!lambda{v. 'e1['v]}; 's1}}

prim_rw unfold_apply : Sil_syntax!apply{'e1; 'e2} <-->
   prog{s1.
      "match"{.eval{'e2; 's1}; v2, s2.
      "match"{.eval{'e1; 's2}; v1, s3.
         eval{.'v1 'v2; 's3}}}}

(************************************************************************
 * NATURAL SEMANTICS                                                    *
 ************************************************************************)

(*
 * Numbers.
 *)
interactive snumber_eval :
   sequent { <H> >- evalsto{eval{.Sil_syntax!number[i:n]; 's1}; ."value"{.Itt_int!number[i:n]; 's1}} }

interactive add_eval 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_int!number[i:n]; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{.Itt_int!number[j:n]; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!add{'e1; 'e2}; 's1}; ."value"{.Itt_int!add{.Itt_int!number[i:n]; .Itt_int!number[j:n]}; 's3}} }

interactive sub_eval 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_int!number[i:n]; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{.Itt_int!number[j:n]; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!sub{'e1; 'e2}; 's1}; ."value"{.Itt_int!sub{.Itt_int!number[i:n]; .Itt_int!number[j:n]}; 's3}} }

interactive if_eval_true (Itt_int!number[i:n]) 's2 (Itt_int!number[j:n]) 's3 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_int!number[i:n]; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{.Itt_int!number[j:n]; 's3}} } -->
   [assertion] sequent { <H> >- "assert"{eq_int{.Itt_int!number[i:n]; .Itt_int!number[j:n]}} } -->
   [main] sequent { <H> >- evalsto{eval{'e3; 's3}; ."value"{'v3; 's4}} } -->
   sequent { <H> >- evalsto{eval{."if"{'e1; 'e2; 'e3; 'e4}; 's1}; ."value"{'v3; 's4}} }

interactive if_eval_false (Itt_int!number[i:n]) 's2 (Itt_int!number[j:n]) 's3 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_int!number[i:n]; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{.Itt_int!number[j:n]; 's3}} } -->
   [assertion] sequent { <H> >- "assert"{bnot{eq_int{.Itt_int!number[i:n]; .Itt_int!number[j:n]}}} } -->
   [main] sequent { <H> >- evalsto{eval{'e4; 's3}; ."value"{'v4; 's4}} } -->
   sequent { <H> >- evalsto{eval{."if"{'e1; 'e2; 'e3; 'e4}; 's1}; ."value"{'v4; 's4}} }

(*
 * Disjoint union.
 *)
interactive inl_eval :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!inl{'e1}; 's1}; ."value"{.Itt_union!inl{'v1}; 's2}} }

interactive inr_eval :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!inr{'e1}; 's1}; ."value"{.Itt_union!inr{'v1}; 's2}} }

interactive decide_eval_left 'v1 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_union!inl{'v1}; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2['v1]; 's2}; ."value"{'v2; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!decide{'e1; x. 'e2['x]; y. 'e3['y]}; 's1}; ."value"{'v2; 's3}} }

interactive decide_eval_right 'v1 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_union!inr{'v1}; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e3['v1]; 's2}; ."value"{'v3; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!decide{'e1; x. 'e2['x]; y. 'e3['y]}; 's1}; ."value"{'v3; 's3}} }

(*
 * Pairs.
 *)
interactive pair_eval 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{'v2; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!pair{'e1; 'e2}; 's1}; ."value"{.Itt_dprod!pair{'v1; 'v2}; 's3}} }

interactive spread_eval 'v1 'v2 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{.Itt_dprod!pair{'v1; 'v2}; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2['v1; 'v2]; 's2}; ."value"{'v3; 's3}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!spread{'e1; x, y. 'e2['x; 'y]}; 's1}; ."value"{'v3; 's3}} }

(*
 * Reference cells.
 *)
interactive ref_eval 'v1 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   sequent { <H> >- evalsto{eval{ref{'e1}; 's1}; .alloc{'s2; 'v1}} }

interactive deref_eval 'v1 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   sequent { <H> >- evalsto{eval{deref{'e1}; 's1}; ."value"{fetch{'s2; 'v1}; 's2}} }

interactive assign_eval 's2 :
   [main] sequent { <H> >- evalsto{eval{'e1; 's1}; ."value"{'v1; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e2; 's2}; ."value"{'v2; 's3}} } -->
   sequent { <H> >- evalsto{eval{assign{'e1; 'e2}; 's1}; ."value"{.Itt_int!number[0:n]; store{'s3; 'v1; 'v2}}} }

(*
 * Functions.
 *)
interactive lambda_eval :
   sequent { <H> >- evalsto{eval{.Sil_syntax!lambda{v. 'e1['v]}; 's1}; ."value"{.Itt_rfun!lambda{v. 'e1['v]}; 's1}} }

interactive apply_eval 'v2 's2 (Itt_rfun!lambda{v. 'e3['v]}) 's3 :
   [main] sequent { <H> >- evalsto{eval{'e2; 's1}; ."value"{'v2; 's2}} } -->
   [main] sequent { <H> >- evalsto{eval{'e1; 's2}; ."value"{.Itt_rfun!lambda{v. 'e3['v]}; 's3}} } -->
   [main] sequent { <H> >- evalsto{eval{'e3['v2]; 's3}; ."value"{'v3; 's4}} } -->
   sequent { <H> >- evalsto{eval{.Sil_syntax!apply{'e1; 'e2}; 's1}; ."value"{'v3; 's4}} }

(*
 * -*-
 * Local Variables:
 * Caml-master: "nl"
 * End:
 * -*-
 *)
