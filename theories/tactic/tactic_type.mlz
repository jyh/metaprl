(*
 * Define the common types.
 *)

open Term
open Refine
open Filter_proof_type

(*
 * Every goal has a label.
 *)
type tactic_argument =
   { ref_label : string;
     ref_args : attribute list;
     ref_fcache : cache;
     ref_rsrc : tactic_resources
   }

and tactic_resources =
   { ref_d : int -> tactic;
     ref_eqcd : tactic;
     ref_typeinf : term_subst -> term -> term_subst * term;
     ref_squash : tactic;
     ref_subtype : tactic
   }

(*
 * A tactic takes these arguments.
 *)
and tactic = tactic_argument Refiner.tactic
and safe_tactic = tactic_argument Refiner.safe_tactic

and rw = tactic_argument Refiner.rw
and cond_rewrite = tactic_argument Refiner.cond_rewrite

and cache = tactic_argument Refiner.tactic Tactic_cache.extract

(*
 * A real arg also includes the goal.
 *)
type tactic_arg = term * tactic_argument

(*
 * $Log$
 * Revision 1.3  1998/04/17 01:31:35  jyh
 * Editor is almost constructed.
 *
 * Revision 1.2  1998/04/13 21:11:17  jyh
 * Added interactive proofs to filter.
 *
 * Revision 1.1  1997/04/28 15:52:44  jyh
 * This is the initial checkin of Nuprl-Light.
 * I am porting the editor, so it is not included
 * in this checkin.
 *
 * Directories:
 *     refiner: logic engine
 *     filter: front end to the Ocaml compiler
 *     editor: Emacs proof editor
 *     util: utilities
 *     mk: Makefile templates
 *
 *
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
