(*
 * This is a module that threads refiner operations.
 *)

(*
 * The interface to Ensemble uses abstract
 * unique system-wide handles.  The interface
 * to Ensemble is through the server which is
 * created with a callback when notifications occur.
 *)
module type RemoteSig =
sig
   type ('job, 'notify) server
   type t

   (*
    * The server is passed a notifier.
    *)
   val create_server : ((t * 'notify) list -> unit) -> ('job, 'notify) server

   (*
    * Operations on handles.
    *)
   val create : ('job, 'notify) server -> t
   val eq : t -> t -> bool

   (*
    * Issue a remote job.
    * The function that is passed is a notifier.
    *)
   val submit : ('job, 'notify) server -> t -> 'job -> unit
   val cancel : ('job, 'notify) server -> t -> unit
end

(*
 * This module is used to provide arguments to the thread module.
 *)
module type ThreadRefinerArgSig =
sig
   type extract

   (* Function for composing extracts *)
   val compose : extract -> extract list -> extract
end

module type ThreadRefinerSig =
sig
   (* Access is through a server *)
   type 'term server

   (* These are the thread objects *)
   type 'term t

   (* Arguments are result *)
   type extract
   type 'term tactic = 'term -> 'term t

   (* Create a server *)
   val create : (out_channel -> 'term -> unit) -> 'term server

   (* Fold a value *)
   val create_value : 'term list -> extract -> 'term t

   (* First operation that succeeds *)
   val first : 'term tactic list -> 'term tactic

   (* All operations should succeed *)
   val compose1 : 'term tactic -> 'term tactic -> 'term tactic
   val compose2 : 'term tactic -> 'term tactic list -> 'term tactic
   val composef : 'term tactic -> ('term list -> 'term t list) -> 'term tactic

   (* Fully evaluate the thread *)
   val eval : 'term server -> 'term t -> 'term list * extract
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
